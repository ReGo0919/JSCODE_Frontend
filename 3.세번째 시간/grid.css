.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  /* grid 안에 있는 아이템들의 열의 너비를 지정 */
  grid-template-columns: repeat(5, 100px);
  /* repeat(열의 개수, 각 너비) 사용시 일정 간격을 반복해서 grid의 cell들을 일정 간격으로 지정 가능 */
  grid-template-columns: repeat(5, 1fr);
  /* repeat의 두번째 인자를 %나 fr로 사용시 해당 부모 요소의 영역의 범위를 기준으로 할당 가능. */
  grid-template-rows: 100px 200px;
  /* grid 안에 있는 아이템들의 행의 너비를 지정 */
  grid-template-rows: repeat(2, 100px);
  /* repeat(행의 개수, 각 너비) 사용시 일정 간격을 반복해서 grid의 cell들을 일정 간격으로 지정 가능 */
  grid-auto-rows: minmax(150px, auto);
  /* grid의 해당 열, 행을 지정된 px로 자동 분배 하고 싶다면 grid-auto-column or rows를 사용하면 된다. 
  만약 해당 rows에 값이 긴 경우 minmax 속성을 사용하여 첫번째 인자는 최소값, 두번째 인자는 알아서 최대 높이를 조정 하도록 해주면 된다.
  */
  grid-gap: 10px;
  /* grid-gap은 열 행 방향으로 동일하게 지정 px만큼 갭 생성 가능. */
  grid-column-gap: 10px;
  grid-row-gap: 10px;
  /* 혹은 grid-column-gap / grid-row-gap을 사용해서 행과 열 따로 갭을 주는것도 가능. */
  padding: 10px;
}
.item2 {
  /* grid-row, column은 해당 셀의 영역을 지정 해주는 속성인데
  start는 시작점, end는 종료점으로 이해를 하면 된다. 
  각각의 시작점과 종료점은 해당 영역의 class가 가진 범위의 왼쪽 위의 선부터 시작되며 반대방향을 지정 할때는 -를 붙여주면 된다.
  그리고 grid-row: 2 / span 3 을 이용해서 두번째 줄부터 start를 끊을건데 몇개의 셀까지 확장 할지를 모를때는 span을 이용하여 
  cell 값을 지정 할 수도 있다.
  */
  grid-row: 2/4;
  grid-column: 1/3;
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 1;
  grid-row-end: 3;
}
